// EventMonitorService.js - Real-time blockchain event monitoring
import { ethers } from "ethers";

class EventMonitorService {
    constructor() {
        this.contract = null;
        this.provider = null;
        this.auditEvents = [];
        this.listeners = new Map();
        this.isMonitoring = false;
    }

    async initialise(contract, provider) {
        this.contract = contract;
        this.provider = provider;
        console.log("Event Monitor Service initialised");
    }

    // Start monitoring all audit-related events
    async startMonitoring() {
        if (!this.contract || this.isMonitoring) return;

        this.isMonitoring = true;
        console.log("Starting comprehensive event monitoring...");

        // Monitor all the new audit events
        this.setupEventLIsteners();

        // Load historical events
        await this.loadHistoricalEvents();
    }

    setupEventLIsteners() {
        // Admin Action Events
        this.contract.on('AdminActionLogged', (actionType, admin, timestamp, details, event) => {
            this.handleEvent('ADMIN_ACTION', {
                actionType,
                admin,
                timestamp: Number(timestamp),
                details,
                blockNumber: event.blockNumber,
                transactionHash: event.transactionHash
            });
        });

        // Candidate Managmeent Events
        this.contract.on('CandidateAdded', (candidateId, name, party, addedBy, timestamp, event) => {
            this.handleEvent('CANDIDATE_ADDED', {
                candidateId: Number(candidateId),
                name,
                party,
                addedBy,
                timestamp: Number(timestamp),
                blockNumber: event.blockNumber,
                transactionHash: event.transactionHash
            });
        });

        // Voting Phase Events
        this.contract.on('VotingPhaseChanged', (oldPhase, newPhase, changedBy, timestamp, duration, event) => {
            this.handleEvent('PHASE_CHANGED', {
                oldPhase: this.getPhaseString(Number(oldPhase)),
                newPhase: this.getPhaseString(Number(newPhase)),
                changedBy,
                timestamp: Number(timestamp),
                duration: Number(duration),
                blockNumber: event.blockNumber,
                transactionHash: event.transactionHash
            });
        });

        //Voter Status Events
        this.contract.on('VoterStatusChanged', (voter, statusType, changedBy, timestamp, event) => {
            this.handleEvent('VOTER_STATUS', {
                voter,
                statusType,
                changedBy,
                timestamp: Number(timestamp),
                blockNumber: event.blockNumber,
                transactionHash: event.transactionHash
            });
        });

        // Election Metrics Events
        this.contract.on('ElectionMetrics', (totalCandidates, totalAuthorisedVoters, totalCommittedVotes, totalRevealedVotes, timestamp, event) => {
            thiss.handleEvent('METRICS_UPDATE', {
                totalCandidates: Number(totalCandidates),
                totalAuthorisedVoters: Number(totalAuthorisedVoters),
                totalCommittedVotes: Number(totalCommittedVotes),
                totalRevealedVotes: Number(totalRevealedVotes),
                timestamp: Number(timestamp),
                blockNumber: event.blockNumber,
                transactionHash: event.transactionHash
            });
        });

         // System Audit Events
        this.contract.on('SystemAudit', (auditType, auditor, auditHash, timestamp, details, event) => {
            this.handleEvent('SYSTEM_AUDIT', {
                auditType,
                auditor,
                auditHash,
                timestamp: Number(timestamp),
                details,
                blockNumber: event.blockNumber,
                transactionHash: event.transactionHash
            });
        });

        // Legacy Events (for backward compatibility)
        this.contract.on('VoteCommitted', (voter, nullifier, event) => {
            this.handleEvent('VOTE_COMMITTED', {
                voter,
                nullifier,
                timestamp: Date.now() / 1000,
                blockNumber: event.blockNumber,
                transactionHash: event.transactionHash
            });
        });

        this.contract.on('VoteRevealed', (voter, event) => {
            this.handleEvent('VOTE_REVEALED', {
                voter,
                timestamp: Date.now() / 1000,
                blockNumber: event.blockNumber,
                transactionHash: event.transactionHash
            });
        });

        console.log("Event listeners set up successfully");
    }

    async loadHistoricalEvents() {
        try {
            console.log("Loading historical events...");
            
            // Get all events from contract deployment
            const currentBlock = await this.provider.getBlockNumber();
            const fromBlock = Math.max(0, currentBlock - 10000); // Last ~10k blocks
            
            // Load different event types
            const eventTypes = [
                'AdminActionLogged',
                'CandidateAdded', 
                'VotingPhaseChanged',
                'VoterStatusChanged',
                'ElectionMetrics',
                'SystemAudit',
                'VoteCommitted',
                'VoteRevealed'
            ];

            for (const eventType of eventTypes) {
                try {
                    const filter = this.contract.filters[eventType]();
                    const events = await this.contract.queryFilter(filter, fromBlock, currentBlock);
                    
                    events.forEach(event => {
                        this.processHistoricalEvent(eventType, event);
                    });
                } catch (error) {
                    console.warn(`Could not load ${eventType} events:`, error.message);
                }
            }

            console.log(`Loaded ${this.auditEvents.length} historical events`);
            this.notifyListeners('HISTORY_LOADED', { count: this.auditEvents.length });
            
        } catch (error) {
            console.error("Error loading historical events:", error);
        }
    }

    processHistoricalEvent(eventType, event) {
        let processedEvent;

        switch (eventType) {
            case 'AdminActionLogged':
                processedEvent = {
                    type: 'ADMIN_ACTION',
                    actionType: event.args.actionType,
                    admin: event.args.admin,
                    timestamp: Number(event.args.timestamp),
                    details: event.args.details,
                    blockNumber: event.blockNumber,
                    transactionHash: event.transactionHash
                };
                break;

            case 'CandidateAdded':
                processedEvent = {
                    type: 'CANDIDATE_ADDED',
                    candidateId: Number(event.args.candidateId),
                    name: event.args.name,
                    party: event.args.party,
                    addedBy: event.args.addedBy,
                    timestamp: Number(event.args.timestamp),
                    blockNumber: event.blockNumber,
                    transactionHash: event.transactionHash
                };
                break;

            case 'VotingPhaseChanged':
                processedEvent = {
                    type: 'PHASE_CHANGED',
                    oldPhase: this.getPhaseString(Number(event.args.oldPhase)),
                    newPhase: this.getPhaseString(Number(event.args.newPhase)),
                    changedBy: event.args.changedBy,
                    timestamp: Number(event.args.timestamp),
                    duration: Number(event.args.duration),
                    blockNumber: event.blockNumber,
                    transactionHash: event.transactionHash
                };
                break;

            default:
                // Handle other event types similarly
                return;
        }

        if (processedEvent) {
            this.auditEvents.push({
                ...processedEvent,
                id: `${event.blockNumber}-${event.transactionIndex}`,
                isHistorical: true
            });
        }
    }

    handleEvent(type, data) {
        const auditEvent = {
            id: `${data.blockNumber}-${data.transactionHash}-${Date.now()}`,
            type,
            timestamp: data.timestamp,
            blockNumber: data.blockNumber,
            transactionHash: data.transactionHash,
            data,
            isHistorical: false,
            receivedAt: new Date().toISOString()
        };

        this.auditEvents.push(auditEvent);
        console.log(`New audit event: ${type}`, auditEvent);

        // Notify all listeners
        this.notifyListeners(type, auditEvent);
        this.notifyListeners('NEW_EVENT', auditEvent);
    }

    // Subscribe to specific event types
    subscribe(eventType, callback) {
        if (!this.listeners.has(eventType)) {
            this.listeners.set(eventType, []);
        }
        this.listeners.get(eventType).push(callback);

        // Return unsubscribe function
        return () => {
            const callbacks = this.listeners.get(eventType);
            if (callbacks) {
                const index = callbacks.indexOf(callback);
                if (index > -1) {
                    callbacks.splice(index, 1);
                }
            }
        };
    }

    notifyListeners(eventType, data) {
        const callbacks = this.listeners.get(eventType);
        if (callbacks) {
            callbacks.forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error(`Error in event callback for ${eventType}:`, error);
                }
            });
        }
    }

    // Get all audit events
    getAllEvents() {
        return [...this.auditEvents].sort((a, b) => b.timestamp - a.timestamp);
    }

    // Get events by type
    getEventsByType(type) {
        return this.auditEvents.filter(event => event.type === type);
    }

    // Get events by admin
    getEventsByAdmin(adminAddress) {
        return this.auditEvents.filter(event => 
            event.data.admin === adminAddress || 
            event.data.addedBy === adminAddress ||
            event.data.changedBy === adminAddress
        );
    }

    // Get election timeline
    getElectionTimeline() {
        const timelineEvents = this.auditEvents.filter(event => 
            ['PHASE_CHANGED', 'ADMIN_ACTION', 'CANDIDATE_ADDED'].includes(event.type)
        );
        return timelineEvents.sort((a, b) => a.timestamp - b.timestamp);
    }

    // Get voting statistics
    getVotingStats() {
        const metricsEvents = this.getEventsByType('METRICS_UPDATE');
        const latestMetrics = metricsEvents[metricsEvents.length - 1];
        
        const voterEvents = this.getEventsByType('VOTER_STATUS');
        const commitEvents = this.getEventsByType('VOTE_COMMITTED');
        const revealEvents = this.getEventsByType('VOTE_REVEALED');

        return {
            latestMetrics: latestMetrics?.data || null,
            totalVoterActions: voterEvents.length,
            totalCommitments: commitEvents.length,
            totalReveals: revealEvents.length,
            lastUpdated: latestMetrics?.timestamp || 0
        };
    }

    // Export audit trail
    exportAuditTrail() {
        return {
            exportedAt: new Date().toISOString(),
            totalEvents: this.auditEvents.length,
            events: this.getAllEvents(),
            summary: {
                eventTypes: [...new Set(this.auditEvents.map(e => e.type))],
                timeRange: {
                    earliest: Math.min(...this.auditEvents.map(e => e.timestamp)),
                    latest: Math.max(...this.auditEvents.map(e => e.timestamp))
                },
                blockRange: {
                    earliest: Math.min(...this.auditEvents.map(e => e.blockNumber)),
                    latest: Math.max(...this.auditEvents.map(e => e.blockNumber))
                }
            }
        };
    }

    getPhaseString(phaseNumber) {
        const phases = ['Registration', 'Commitment', 'Reveal', 'Ended'];
        return phases[phaseNumber] || 'Unknown';
    }

    stopMonitoring() {
        if (this.contract && this.isMonitoring) {
            this.contract.removeAllListeners();
            this.isMonitoring = false;
            console.log("Event monitoring stopped");
        }
    }

    // Format event for display
    formatEventForDisplay(event) {
        const baseInfo = {
            id: event.id,
            type: event.type,
            timestamp: new Date(event.timestamp * 1000).toLocaleString(),
            blockNumber: event.blockNumber,
            transactionHash: event.transactionHash?.slice(0, 10) + '...',
            isHistorical: event.isHistorical
        };

        switch (event.type) {
            case 'ADMIN_ACTION':
                return {
                    ...baseInfo,
                    title: `Admin Action: ${event.data.actionType}`,
                    description: event.data.details,
                    actor: event.data.admin,
                };

            case 'CANDIDATE_ADDED':
                return {
                    ...baseInfo,
                    title: `Candidate Added: ${event.data.name}`,
                    description: `${event.data.party} - Added by ${event.data.addedBy?.slice(0, 8)}...`,
                    actor: event.data.addedBy,
                };

            case 'PHASE_CHANGED':
                return {
                    ...baseInfo,
                    title: `Phase Changed: ${event.data.oldPhase} → ${event.data.newPhase}`,
                    description: `Duration: ${Math.floor(event.data.duration / 60)} minutes`,
                    actor: event.data.changedBy,
                };

            case 'VOTER_STATUS':
                return {
                    ...baseInfo,
                    title: `Voter ${event.data.statusType}`,
                    description: `Voter: ${event.data.voter?.slice(0, 8)}...`,
                    actor: event.data.changedBy,
                };

            case 'VOTE_COMMITTED':
                return {
                    ...baseInfo,
                    title: 'Vote Committed',
                    description: `Voter: ${event.data.voter?.slice(0, 8)}...`,
                    actor: event.data.voter,
                };

            case 'VOTE_REVEALED':
                return {
                    ...baseInfo,
                    title: 'Vote Revealed',
                    description: `Voter: ${event.data.voter?.slice(0, 8)}...`,
                    actor: event.data.voter,
                };

            case 'METRICS_UPDATE':
                return {
                    ...baseInfo,
                    title: 'Election Metrics Updated',
                    description: `Candidates: ${event.data.totalCandidates}, Committed: ${event.data.totalCommittedVotes}, Revealed: ${event.data.totalRevealedVotes}`,
                    actor: 'System',
                };

            case 'SYSTEM_AUDIT':
                return {
                    ...baseInfo,
                    title: `System Audit: ${event.data.auditType}`,
                    description: event.data.details,
                    actor: event.data.auditor,
                };

            default:
                return {
                    ...baseInfo,
                    title: `Unknown Event: ${event.type}`,
                    description: 'Event details not available',
                    actor: 'Unknown',
                };
        }
    }
}

// Singleton instance
const eventMonitor = new EventMonitorService();

export default eventMonitor;
                